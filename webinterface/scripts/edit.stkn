_t_: mad.gettext

jQuery(document).ready(%)

SELECT_FILTERS: {
    hflip: (): jQuery('#edit-segment-hflip-cb').attr('checked', 'checked'),
    repeatframe: (): jQuery('#edit-segment-repeatframe-cb').attr('checked', 'checked'),
    fillspan: (t):
        jQuery('#edit-segment-fillspan-cb').attr('checked', 'checked')
        jQuery('#edit-segment-fillspan-in').val(t)
    ,
}

func getFilters()
    f: []
    if jQuery('#edit-segment-hflip-cb').is(':checked')
        f.push(['hflip', null])
    if jQuery('#edit-segment-repeatframe-cb').is(':checked')
        f.push(['repeatframe', null])
    if jQuery('#edit-segment-fillspan-cb').is(':checked')
        f.push(['fillspan', parseFloat(jQuery('#edit-segment-fillspan-in').val())])
    return f

segStartInput: jQuery('#edit-segment-start')

func editSegment(segment, cb)
    editDiv: jQuery('#edit-segment-panel').detach()
    panel: mad.createOverlapPanel().append(editDiv.show())

    func quit()
        editDiv.detach()
        jQuery(document.body).append(editDiv.hide())
        panel.quit()

    jQuery('#edit-segment-quit').unbind('click').click(quit)
    jQuery('#edit-segment-confirm').unbind('click').click(():
        start: mad.parseTime(segStartInput.val())
        if isNaN(start)
            segStartInput.focus()
            return jQuery('#edit-error-feedback').text(_t_('edit_invalid_time'))
        duration: parseFloat(jQuery('#edit-segment-duration').val())
        if isNaN(duration)
            jQuery('#edit-segment-duration').focus()
            return jQuery('#edit-error-feedback').text(_t_('edit_invalid_num'))
        quit()
        cb({
            epnum: parseFloat(jQuery('#edit-segment-epnum-selector :selected').val()),
            start: start,
            duration: duration,
            filters: getFilters(),
        })
    )

    if segment.epnum
        jQuery('#edit-segment-epnum-selector option[value="' + segment.epnum + '"]').attr('selected', 'selected')
        frameTime.setTime(segment.start)

    segStartInput.val(mad.formatTime(segment.start))
    jQuery('#edit-segment-duration').val(segment.duration)

    segment.filters |:
        sf: SELECT_FILTERS[$[0]]
        if sf
            sf($[1])

func currentVideoFile()
    epnum: parseFloat(jQuery('#edit-segment-epnum-selector :selected').val())
    return [epnum, mad.workspace.findSourceByEpnum(epnum)]

func displayFrame(time)
    img: jQuery('#edit-segment-frame-viewer')
    img.attr('src', '/frame/loading')
    epnum_n_video: currentVideoFile()
    jQuery.post('/frame/gen', {
        epnum: epnum_n_video[0],
        time: time,
        source_path: epnum_n_video[1],
        output_path: mad.workspace.getOutputPath(),
    }, %r)
    img.attr('src', '/frame/?path=' + encodeURIComponent(r))

frameTime: jQuery('.edit-segment-frame-time')
frameTime.time: 0
frameTime.setTime: (time):
    @time: time if time >=0 else 0
    @text(mad.formatTime(@time))
    displayFrame(@time)
frameTime.incTime: (delta): @setTime(parseFloat(delta) + @time)

jQuery('#edit-segment-epnum-selector').change((): frameTime.incTime(0))
jQuery('.mm-time-spanner-btn').click((): frameTime.incTime(jQuery(@).data('span')))
jQuery('#edit-segment-use-as-start').click((): segStartInput.val(mad.formatTime(frameTime.time)))

jQuery('#edit-segment-play').click(():
    mad.player.video(currentVideoFile()[1], %r)
    if r != null
        frameTime.setTime(r)
)

export mad.edit.createSegment: (cb): editSegment({}, cb)
export mad.edit.editSegment: editSegment
export mad.edit.syncEpnums: (ls):
    s: jQuery('#edit-segment-epnum-selector').html('')
    ls |: s.append(jQuery('<option>').text($).val($))
